% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bdngenRsquare.R
\name{dbdnsat}
\alias{dbdnsat}
\title{Saturated likelihood of lambda and mu values for individual tip counts}
\usage{
dbdnsat(
  n,
  mu = 0,
  t = 1,
  extantonly = F,
  log = F,
  jittervar = 1e-06,
  extinctmarginal = F,
  startval = 0.1,
  optimpar_plex = list(reltolpar = 1e-04, reltolval = 1e-05, abstolpar = 1e-07, maxiter =
    10000, num_cycles = 1)
)
}
\arguments{
\item{n}{Number of observed species}

\item{mu}{Assumed extinction rate of a birth-death process in case we use extinction marginalisation}

\item{t}{Time period after which species are observed}

\item{extantonly}{Condition the distribution for non extinction, default is F}

\item{log}{Return log-probability, default is F}

\item{jittervar}{Standard deviation of a normal distribution by which lamb and mu are jittered in boundary situation}

\item{extinctmarginal}{Do we marginalize the distribution over the assumed mu values, default is F}

\item{startval}{Starting values of the subplex optimisation of lambda in case we marginalize over assumed mu}

\item{optimpar_plex}{The control list of subplex optimisation of lambda in case we marginalize over assumed mu}
}
\value{
Probability of number of species for maximum lambda and mu
}
\description{
Calculates a saturated likelihoods for individual species counts, i.e. the maximum values of dbdn function across lambda and mu. All parameters are fully vectorized.
}
\examples{
#test if it matches nonsaturated lhs
dbdnsat(1:10)
dbdn(1:10, log(1:10),0, t=1)

#test marginalized version
dbdnsatnv(5,extinctmarginal = F)
dbdnsatnv(5,extinctmarginal = T)
dbdnsatnv(5,mu=5,extinctmarginal = T)
curve(dbdn(n=5,lamb=x,mu=0,t=1),0,10)
curve(dbdn(n=5,lamb=x,mu=5,t=1),add=T)
dbdnsat(5,extinctmarginal = F)
dbdnsat(0:5,extinctmarginal = F)
dbdnsat(0:5,extinctmarginal = T)
dbdnsat(0:5,mu=c(10,0,0,0,0,0),extinctmarginal = T)
dbdnsat(0:5,mu=c(1,1,1,1,1,1),extinctmarginal = c(F,T,T,F,F,F))
dbdnsat(0:5,mu=0,extinctmarginal = T,startval=c(0,0,0,0,-10,-10))
}
